객체지향 개발 5대 원칙 : SOLID
(참고 - https://www.nextree.co.kr/p6960/)

S - SRP(단일 책임의 원칙, Single Responsibility Principle)
    1) 작성한 클래스는 1가지 기능만 가져야함
    2) 이 클래스가 제공하는 모든 서비스는 이 1가지 기능을 책임지고 수행하는데에 있음
    3) 무조건 책임분리x! 순작용(개체간 응집력->병합 or 결합력 ->분리)
    4) 이점 : 코드의 가독성 향상, 유지보수 용이
    응용) 학번에 따른 성명, 성별, 연령 등을 설정할때 클래스를 나눔
         1번 학생_클래스(private 필드: int타입의 학번, 학생스팩타입의 스팩, 초기화 생성자: 학번, 학생스팩)
         2번 학생스팩_클래스(public 필드: string타입의 성명, string타입의 성별, int타입의 연령)

O - OCP(개방폐쇄의 원칙, Open Close Principle)
    1) software 구성요소는 확장에 개방적, 변경에 폐쇄적이어야함 so 변경가능(확장), 변경불가할 데이터를 엄격히 구분해야함
    2) also 비용 측면에서 확장은 수용, 변경은 지양(but 항상 변화
    3) 추가사항 발생해도 기존 구성요소의 수정은 nope. But 확장해 재사용은 Good.
    4) 이점 : 관리가능, 재사용성 높은 코드의 기반 + 추상화와 다형성이 이를 가능케함
    응용) 교수 클래스가 추가됨에 따라 확장함
         1번 직업_클래스(필드: 학번(교수번호), 직업스팩)
            1번을 학생_클래스 & 교수_클래스가 extends 받음
         2번 직업스팩_클래스(필드 : 성명, 성별, 연령)
            2번을 학생스팩_클래스 & 교수스팩_클래스가 extends 받음

L - LSP(리스코브 치환의 원칙, The Liskov Substitution Principle)
    1) 서브 타입은 언제나 슈퍼 타입으로 교체할 수 있어야 함(항상 상호 호환가능)
    2) 서브 클래스가 확장에 대한 인터페이스를 준수해야함을 의미함
    3) 상속을 통한 재사용은 슈퍼-서브 클래스가 is-a 관계일때만 가능하도록 제한 그 외에는 composition을 이용한 재사용
    4) 이점 : 변화에 열려있는 프로그래밍 가능
    응용) LinkedList와 HashSet은 모두 Collection 인터페이스를 상속하고 있음
         따라서 LinkedList 타입을 사용해 작성한 메소드는 별도의 수정 없이
         타입부분만 HashSet으로 변경할 수 있음

I - ISP(인터페이스 분리의 원칙, Interface Segregation Principle) - 인터페이스 단일책임
    1) 일반적 인터페이스 1개보다 구체적 인터페이스 여러개가 낫다
    2) 클래스에서 사용하지 않는 인터페이스는 구현하지 말아야함
    3) 클래스 끼리 상속 시 가능한 최소한의 인터페이스만 사용
    4) 이점 : 코드 가독성 향상, 유지보수 용이, 재사용성 극대화
    응용) 사이트 참조_좀 어려움

D - DIP(의존성역전의 원칙, Dependency Inversion Principle)
    1) 위계질서 없앰 - 하위 클래스가 상위 클래스의 변경 요구
    2) 훅 메소드(슈퍼클래스에서 서브클래스가 선택적으로 오버라이드할 수 있게 만듦)
    3) IOC(훅 메소드를 호출)
    4) 이점 : 훅 메소드, IOC, 확장성, 복잡한 요소간의 커뮤니케이션 관계를 단순화
    응용) 사이느 참조_어려움...


--------------------------------------------------------------
간단하게 요약하자면
1) 1개의 클래스는 1개의 기능만을 가져야함(책임)
2) 확장 좋아, 변경 별로
3) 자식타입은 언제든지 부모타입으로 교체해도 문제 없어야함
4) 1개의 인터페이스는 1개의 기능만을 가져야함(책임)
5) 자식클래스가 부모클래스를 변경하게 할 수 있음(위계질서 깨기)







